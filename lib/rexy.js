// Generated by CoffeeScript 1.3.3

/*----------------------------------

  Rexster API for nodejs
  
  requirements:
    restler

  Author: Tyler Anderson
  github: Tyler-Anderson
  twitter: _Bravado
  website: http://Brava.do

----------------------------------
*/


(function() {
  var Rex, rest;

  rest = require("./node_modules/restler");

  Rex = (function() {

    function Rex(url, db) {
      this.url = url + "/graphs/";
      this.db = db;
    }

    Rex.prototype.getGraphs = function(cb) {
      rest.get(this.url).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getNamedGraph = function(cb) {
      rest.get(this.url + this.db).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertices = function(cb) {
      rest.get(this.url + this.db + "/vertices").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertexWithId = function(cb, id) {
      rest.get(this.url + this.db + "/vertices/" + id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getAdjacentOut = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/out" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getAdjacentIn = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/in" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getAdjacentBoth = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/both" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getOutVerticesCount = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/outCount" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getInVerticesCount = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/inCount" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getBothVerticesCount = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/bothCount" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getOutVertices = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/outIds" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getInVertices = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/inIds" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getByBothVertices = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/vertices/" + req.id + "/bothIds" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getAdjacentByEdgeLabel = function(cb, req) {
      rest.get(this.url + this.db + "/vertices/" + req.id + req.dir + "?_" + req.label + "=written_by").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getEdges = function(cb) {
      rest.get(this.url + this.db + "/edges").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getEdgeById = function(cb, id) {
      rest.get(this.url + this.db + "/edges" + id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertexOutEdges = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/edges" + "/vertices/" + req.id + "/outE" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertexInEdges = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/edges" + "/vertices/" + req.id + "/inE" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertexBothEdges = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      if (req.params) {
        _buf += "?";
        _ref = req.params;
        for (k in _ref) {
          v = _ref[k];
          _buf += k + "=" + v + "&";
        }
        _buf = _buf.slice(0, -1);
      }
      rest.get(this.url + this.db + "/edges" + "/vertices/" + req.id + "/bothE" + _buf).on("complete", function(data) {
        return cb(data);
      }).on("error", function(error) {
        return cb(error);
      });
      return true;
    };

    Rex.prototype.getByEdgeLabel = function(cb, req) {
      rest.get(this.url + this.db + "/vertices/" + req.id + req.dir + "E?_" + req.label + "=written_by").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getIndices = function(cb) {
      rest.get(this.url + this.db + "/indices").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getElementsByKV = function(cb, req) {
      rest.get(this.url + this.db + "/indices/index?key=" + req.key + "&value=" + req.value).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getElementCountByKV = function(cb, req) {
      rest.get(this.url + this.db + "/indices/index/count?key=" + req.key + "&value=" + req.value).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getKeyIndices = function(cb) {
      rest.get(this.url + this.db + "/keyindices/").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getVertexKeys = function(cb) {
      rest.get(this.url + this.db + "/keyindices/vertex").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getEdgeKeys = function(cb) {
      rest.get(this.url + this.db + "/keyindices/edge").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postVertex = function(cb) {
      rest.post(this.url + this.db + "/vertices/").on("complete", function(data) {
        return cb(data);
      }).on("error", function(error) {
        return console.log(error);
      });
      return true;
    };

    Rex.prototype.postVertexWithId = function(cb, id) {
      rest.post(this.url + this.db + "/vertices/" + id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postCreateOrUpdateV = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        console.log(k, v);
        _buf += k + "=" + v + "&";
      }
      _buf = _buf.slice(0, -1);
      rest.post(this.url + this.db + "/vertices/" + req.id + "?" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postEdgeWithLabel = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        _buf += "&" + k + "=" + v;
      }
      return rest.post(this.url + this.db + "/edges?_outV=" + req.outV + "&_label=" + req.label + "&_inV=" + req.inV + _buf).on("complete", function(data) {
        return cb(data);
      }).on("error", function(error) {
        return console.log(error);
      });
    };

    Rex.prototype.postEdgeWithId = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        _buf += "&" + k + "=" + v;
      }
      rest.post(this.url + this.db + "/edges/" + req.id + "?_outV=" + req.outV + "&_label=" + req.label + "&_inV=" + req.inV + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postUpdateEdge = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        _buf += k + "=" + v + "&";
      }
      _buf = _buf.slice(0, -1);
      rest.post(this.url + this.db + "/edges/" + req.id + "?" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postManualIndex = function(cb, index) {
      rest.post(this.url + this.db + "/indices/" + index + "?class=vertex").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.postCreateKey = function(cb, req) {
      rest.post(this.url + this.db + "/keyindices/" + req.vertex + "/" + req.key).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.putReplaceVProperties = function(cb, req, buf) {
      var k, v, _buf, _ref;
      if (buf == null) {
        buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        _buf += k + "=" + v + "&";
      }
      _buf = _buf.slice(0, -1);
      rest.put(this.url + this.db + "/vertices/" + req.id + "?" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.putReplaceEProperties = function(cb, req, _buf) {
      var k, v, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _ref = req.properties;
      for (k in _ref) {
        v = _ref[k];
        _buf += k + "=" + v + "&";
      }
      _buf = _buf.slice(0, -1);
      rest.put(this.url + this.db + "/edges/" + req.id + "?" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.putVertexAtIndexByKV = function(cb, req) {
      rest.put(this.url + this.db + "/indices/" + req.index + "?key=" + req.key + "&value=" + req.value + "&id=" + req.id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.delVertex = function(cb, id) {
      rest.del(this.url + this.db + "/vertices/" + id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.delVProps = function(cb, req) {
      rest.del(this.url + this.db + "/edges/" + req.id + req.properties.join("&")).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.delIndex = function(cb, index) {
      rest.del(this.url + this.db + "/indices/" + index).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.delVertexAtIndexByKV = function(cb, req) {
      rest.del(this.url + this.db + "/indices/" + req.index + "?key=" + req.key + "&value=" + req.value + "&class=vertex&id=" + req.id).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getBatchV = function(cb, idList, _buf) {
      var i, _i, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _buf += "[";
      for (i = _i = 0, _ref = idList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _buf += idList[i] += ",";
      }
      _buf = _buf.slice(0, -1);
      _buf += "]";
      rest.get(this.url + this.db + "/tp/batch/vertices?idList=" + _buf).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.getBatchE = function(cb, req, _buf) {
      var i, _i, _ref;
      if (_buf == null) {
        _buf = "";
      }
      _buf += "[";
      for (i = _i = 0, _ref = idList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _buf += idList[i] += ",";
      }
      _buf = _buf.slice(0, -1);
      _buf += "]";
      rest.get(this.url + this.db + "/tp/batch/edges?idList=" + _buf).on("complete", function(data) {
        return console.data.results;
      });
      return true;
    };

    Rex.prototype.postBatch = function(cb, txList) {
      rest.postJson(this.url + this.db + "/tp/batch/tx", txList).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.gremlin = function(cb, req) {
      rest.postJson(this.url + this.db + "/tp/gremlin", req).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.gremlinV = function(cb, id, req) {
      rest.postJson(this.url + this.db + "/vertices/" + id + "/tp/gremlin", req).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.gremlinE = function(cb, id, req) {
      rest.postJson(this.url + this.db + "/edges/" + id + "/tp/gremlin", req).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.frameV = function(cb, id, frame) {
      rest.get(this.url + this.db + "/vertices/" + id + "/tp/frames/" + frame).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.frameE = function(cb, id, frame) {
      rest.get(this.url + this.db + "/edges/" + id + "/tp/frames/" + frame).on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    Rex.prototype.frameEI = function(cb, id, frame) {
      rest.get(this.url + this.db + "/edges/" + id + "/tp/frames/" + frame + "direction=inverse").on("complete", function(data) {
        return cb(data);
      });
      return true;
    };

    return Rex;

  })();

  module.exports = Rex;

  /*
  #Random examples/texts below here
  myGraph = new Rex "http://server:port", "examplegraph"
  
  #myGraph.postVertex()
  obj1 =
      _action: 'create'
      _type: 'vertex'
      _id: 100
      k1: 'v1'
  obj2 =
      _action: 'create'
      _type: 'vertex'
      _id: 1
      name: 'okram'
      k1: 'v4'
  
      edgy :
          outV:21600068
          outV:"6:30"
          label:"jah"
          inV:"6:70"
          inV:21600084
          properties:
              blah:'kay'
              meow:'purr'
  
  
  #testy ={tx: [obj1,obj2] }
  #console.log testy
  #myGraph.postBatch testy
  
  batch transactions are of form 
  {
  “tx”: [
  {
  “_action”: “create”,
  “_type”: “vertex”,
  “_id”: 100,
  “k1”: “v1”
  },
  {
  “_action”: “update”,
  “_type”: “vertex”,
  “_id”: 1,
  “name”: “okram”,
  “k1”: “v4”
  }]
  
  valid actions are create, update, and delete
  each action requires a valid type (vertex or edge)
  */


}).call(this);
